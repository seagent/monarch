akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  extensions = [ "akka.cluster.metrics.ClusterMetricsExtension" ]
  persistence.journal.plugin = "cassandra-journal"
  actor {
    provider = cluster

    remote-dispatcher {
      type = "Dispatcher"
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 4
        parallelism-max = 16
      }
    }
    allow-java-serialization = off
    enable-additional-serialization-bindings = on

    serializers {
      monitoring-serializer = "monitoring.main.MonitoringSerializer"
    }

    serialization-bindings {
      "monitoring.message.FederateQuery" = monitoring-serializer
      "monitoring.message.FederateSubQuery" = monitoring-serializer
      "monitoring.message.ExecuteSubQuery" = monitoring-serializer
      "monitoring.message.Result" = monitoring-serializer
      "monitoring.message.DistributeBuckets" = monitoring-serializer
      "monitoring.message.PerformHashJoin" = monitoring-serializer
      "monitoring.message.ResultChange" = monitoring-serializer
      "monitoring.message.ScheduledQuery" = monitoring-serializer
    }
  }
  remote {
    log-remote-lifecycle-events = off
    artery {
      enabled = on
      canonical.hostname = "127.0.0.1"
      canonical.port = 2552
      advanced {
        maximum-frame-size = 8 MiB
        buffer-pool-size = 32
        maximum-large-frame-size = 64 MiB
        large-buffer-pool-size = 64
        use-dispatcher = akka.actor.remote-dispatcher
      }
    }
  }

  cluster {

    seed-nodes = [
      "akka://Monitoring@155.223.25.1:2551"
      ,"akka://Monitoring@155.223.25.2:2551"
      #,"akka://Monitoring@155.223.25.3:2551"
      #,"akka://Monitoring@155.223.25.4:2551"
    ]

    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    #auto-down-unreachable-after = 10s

    # Settings for the ClusterClient
    client {
      # Actor paths of the ClusterReceptionist actors on the servers (cluster nodes)
      # that the client will try to contact initially. It is mandatory to specify
      # at least one initial contact.
      # Comma separated full actor paths defined by a string on the form of
      # "akka.tcp://system@hostname:port/system/receptionist"
      initial-contacts = ["akka://Monitoring@155.223.25.1:2551/system/receptionist"
        , "akka://Monitoring@155.223.25.2:2551/system/receptionist"
        #, "akka://Monitoring@155.223.25.3:2551/system/receptionist"
        #, "akka://Monitoring@155.223.25.4:2551/system/receptionist"
        ]

        # Interval at which the client retries to establish contact with one of
        # ClusterReceptionist on the servers (cluster nodes)
        establishing-get-contacts-interval = 3s

        # Interval at which the client will ask the ClusterReceptionist for
        # new contact points to be used for next reconnect.
        refresh-contacts-interval = 60s

        # How often failure detection heartbeat messages should be sent
        heartbeat-interval = 5s

        # Number of potentially lost/delayed heartbeats that will be
        # accepted before considering it to be an anomaly.
        # The ClusterClient is using the akka.remote.DeadlineFailureDetector, which
        # will trigger if there are no heartbeats within the duration
        # heartbeat-interval + acceptable-heartbeat-pause, i.e. 15 seconds with
        # the default settings.
        acceptable-heartbeat-pause = 15s

        # If connection to the receptionist is not established the client will buffer
        # this number of messages and deliver them the connection is established.
        # When the buffer is full old messages will be dropped when new messages are sent
        # via the client. Use 0 to disable buffering, i.e. messages will be dropped
        # immediately if the location of the singleton is unknown.
        # Maximum allowed buffer size is 10000.
        buffer-size = 1000

        # If connection to the receiptionist is lost and the client has not been
        # able to acquire a new connection for this long the client will stop itself.
        # This duration makes it possible to watch the cluster client and react on a more permanent
        # loss of connection with the cluster, for example by accessing some kind of
        # service registry for an updated set of initial contacts to start a new cluster client with.
        # If this is not wanted it can be set to "off" to disable the timeout and retry
        # forever.
        reconnect-timeout = off

        receptionist {
          # Actor name of the ClusterReceptionist actor, /system/receptionist
          name = receptionist

          # Start the receptionist on members tagged with this role.
          # All members are used if undefined or empty.
          role = ""

          # The receptionist will send this number of contact points to the client
          number-of-contacts = 4

          # The actor that tunnel response messages to the client will be stopped
          # after this time of inactivity.
          response-tunnel-receive-timeout = 30s

          # The id of the dispatcher to use for ClusterReceptionist actors.
          # If not specified default dispatcher is used.
          # If specified you need to define the settings of the actual dispatcher.
          use-dispatcher = ""

          # How often failure detection heartbeat messages should be received for
          # each ClusterClient
          heartbeat-interval = 5s

          # Number of potentially lost/delayed heartbeats that will be
          # accepted before considering it to be an anomaly.
          # The ClusterReceptionist is using the akka.remote.DeadlineFailureDetector, which
          # will trigger if there are no heartbeats within the duration
          # heartbeat-interval + acceptable-heartbeat-pause, i.e. 15 seconds with
          # the default settings.
          acceptable-heartbeat-pause = 15s

          # Failure detection checking interval for checking all ClusterClients
          failure-detection-interval = 2s
        }
    }
  }
  extensions = ["akka.cluster.client.ClusterClientReceptionist"]
}

akka.cluster.use-dispatcher = cluster-dispatcher

cluster-dispatcher {
  type = "Dispatcher"
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 4
    parallelism-max = 16
  }
}