akka {
  actor {
    provider = remote

    remote-dispatcher {
      type = "Dispatcher"
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 2
        parallelism-max = 4
      }
    }
    allow-java-serialization = off
    enable-additional-serialization-bindings = on

    serializers {
      monitoring-serializer = "monitoring.main.MonitoringSerializer"
    }

    serialization-bindings {
      "monitoring.message.FederateQuery" = monitoring-serializer
      "monitoring.message.FederateSubQuery" = monitoring-serializer
      "monitoring.message.ExecuteSubQuery" = monitoring-serializer
      "monitoring.message.Result" = monitoring-serializer
      "monitoring.message.DistributeBuckets" = monitoring-serializer
      "monitoring.message.PerformHashJoin" = monitoring-serializer
      "monitoring.message.ResultChange" = monitoring-serializer
      "monitoring.message.ScheduledQuery" = monitoring-serializer
    }
  }
  remote {
    log-remote-lifecycle-events = off
    artery {
      enabled = on
      canonical.hostname = "127.0.0.1"
      canonical.port = 0
      advanced {
        maximum-frame-size = 5 MiB
        buffer-pool-size = 32
        maximum-large-frame-size = 10 MiB
        large-buffer-pool-size = 64
        use-dispatcher = akka.actor.remote-dispatcher
      }
    }
  }
}